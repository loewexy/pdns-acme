#!/bin/bash

exit_error() {
    echo "ERROR: ${1}" >&2
    exit 1
}

init() {
    cd pdns-client

    if [ ! -f pdns.public.pem ]
    then
        ./pdns-keygen
    fi

    cd ..

    setup_config

    cd dehydrated

    touch config
    ./dehydrated -f ./config --register --accept-terms

    cd ..
}

key() {
    cd pdns-client

    if [ -f pdns.public.pem ]
    then
        cat pdns.public.pem
    else
        exit_error "No key present run init command first!"
    fi
}

check_domain_precence() {
    cat pdns-acme.json | jq -r '(.certs | to_entries[] | .key),(.certs[] | .alias | arrays | .[])' | while read domain
    do
        res=$(cat pdns-acme.json | jq .domains[\"$domain\"])
        if [ "$res" == "null" ]
        then
            exit_error "No id configured for domain $domain"
        fi
    done
}

setup_config() {
    echo 'CERTDIR="${BASEDIR}/../certs"' > dehydrated/config
    echo 'HOOK_CHAIN="yes"' >> dehydrated/config
    echo 'HOOK="${BASEDIR}/../hook"' >> dehydrated/config
    echo 'CHALLENGETYPE="dns-01"' >> dehydrated/config

    if [ -f dehydrated.config ]
    then
        cat dehydrated.config >> dehydrated/config
    fi
}

cron() {
    cat pdns-acme.json | jq -r '.certs | to_entries[] |
        (.key + (if (.value.alias | length) > 0 then .value.alias | " " + join(" ") else "" end))' \
    > dehydrated/domains.txt

    setup_config

    cd dehydrated
    ./dehydrated -c -f ./config
    cd ..
}

check_reqs() {
    if [ ! -f "pdns-acme.json" ]
    then
        exit_error "No config file found!"
    fi

    if [ ! -f "pdns-client/pdns.public.pem" -o ! -f "pdns-client/pdns.private.pem" ]
    then
        exit_error "No public key found, call 'pdns-acme init' first!"
    fi
}

SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname "$SCRIPT")

cd "$SCRIPTPATH"

if [ $# -lt 1 ]
then
    exit_error "Command init or cron required"
elif [ $1 == "init" ]
then
    init
elif [ $1 == "key" ]
then
    key
elif [ $1 == "cron" ]
then
    check_reqs
    check_domain_precence
    cron
fi
