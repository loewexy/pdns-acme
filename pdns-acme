#!/bin/bash
#
#Copyright 2016 Lukas Metzger <developer@lukas-metzger.com>.
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


SD="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

CONFIG=""
PDNSUTIL=""
SLEEP=0

function deploy_challenge {
    local DOMAIN="${1}" TOKEN="${3}"
    local ZONE=$(get_zone "$DOMAIN")
    local HOST=${DOMAIN%"$ZONE"}  

    "$PDNSUTIL" add-record "$ZONE" "_acme-challenge.$HOST" "TXT" 30 \""$TOKEN\""

    sleep $SLEEP 
}

function clean_challenge {
    local DOMAIN="${1}" TOKEN="${3}"
    local ZONE=$(get_zone "$DOMAIN")
    local HOST=${DOMAIN%"$ZONE"}  

    "$PDNSUTIL" delete-rrset "$ZONE" "_acme-challenge.$HOST" "TXT"
}

function deploy_cert {
    local DOMAIN="${1}" KEYFILE="${2}" CERTFILE="${3}" CHAINFILE="${4}"

    get_hooks "$DOMAIN" | while read LINE
    do
        eval $LINE
    done
}

function exit_error() {
  echo "ERROR: ${1}" >&2
  exit 1
}

function resolv_config() {
    if [ -f "pdns-acme.json" ]
    then
        CONFIG="pdns-acme.json"
    elif [ -f "$SD/pdns-acme.json" ]
    then
        CONFIG="$SD/pdns-acme.json"
    else
        exit_error "Config file not found."
    fi
    
    if ! jq . "$CONFIG" >/dev/null 2>&1
    then
        exit_error "Parsing error in config file."
    fi
}

function resolv_pdns_client() {
    if [[ -x "/usr/bin/pdnsutil" ]]
    then
        PDNSUTIL="/usr/bin/pdnsutil"
    else
        exit_error "PDNSUtil not found."
    fi
}

function get_zone() {
    local ZONE="$(jq -r .domains[\"$1\"].zone $CONFIG)"
    if [ "$ZONE" == "null" ]
    then
        exit_error "No zone for domain $1 supplied"
    fi
    echo "$ZONE"
}

function get_hooks() {
    jq -r ".domains[\"$1\"].hook | (select(.>=[] and .<{}) | .[]), (select(.==tostring) | .)" $CONFIG
}

function get_sleep_time() {
    SLEEP="$(jq -r .config[\"deploy-wait\"] $CONFIG)"
    if [ "$SLEEP" == "null" ]
    then
        SLEEP=0 
    fi
}

resolv_config
resolv_pdns_client
get_sleep_time

HANDLER=$1
shift

if [ "$HANDLER" = deploy_challenge ]
then
    $HANDLER $@
elif [ "$HANDLER" = clean_challenge ]
then
    $HANDLER $@
elif [ "$HANDLER" = deploy_cert ]
then
    $HANDLER $@
fi


